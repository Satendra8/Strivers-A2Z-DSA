1. Convert to Binary

    def convert2Binary(n):
        ans = ""
        while(n>1):
            rem = n % 2
            n = n//2
            ans = str(rem) + ans
        if n == 1:
            ans = str(n) + ans
        if n == 0:
            ans = str(n) + ans
        return ans

    n = 5
    print(convert2Binary(n))    


2. Convert to Decimal

    def convert2Decimal(s):
        s = s[::-1]
        ans = 0
        for index, c in enumerate(s):
            ans += (2**index) * int(c)
        return ans

    def convert2DecimalOptimal(s):
        power = 1
        ans = 0
        n = len(s)

        for i in range(n-1, -1, -1):
            if s[i] == '1':
                ans += power * 1
            power *= 2
        return ans

    s = '101'
    print(convert2DecimalOptimal(s))


3. 1's Complement
    Eg: 13 -> (1101)
               flip
              (0010)

4. 2's Complement
    step 1. 1's Complement
    step 2. add 1 to it

        Eg: 13 -> (1101)
                   flip
                  (0010) # 1's Complement

                  +   1  # add 1
                  -----------
                   0011


5. AND, OR, XOR, SHIFT, NOT

    i. AND ----> all true => true
                ''  false => false

    ii. OR ----> 1 true => true
                all  false => false
                
    iii. XOR ----> no of 1's -> odd -> 1
                  no of 1's -> even -> 0
    
    iv. SHIFT
        a. Right Shift (>>):
            x = 13, k = 2
            13 >> 2  == x / (2^k) #formula
    
        a. Left Shift (<<)
            x = 13, k = 2
            13 << 2  == x * (2^k) #formula

    ************ Negative Number are Stored as actual numbers 2's complement in memory ***************

    v. NOT (~):
        -> Positive Number
            step 1: flip
            step 2: if -ve then 2's complement else Stop
            Eg: ~(5)

        -> Negative Number
            step 1: convert the number into 2's complement
            step 2: then apply not operator
                => flip
                => if -ve then 2's complement else Stop
            
            Eg: ~(-6)

        ***** while doing operation on -ve number all do 2's complement then perform operation *****


6. Swap 2 Numbers without using extra space

    def swap(a, b):
        a = a ^ b
        b = a ^ b
        a = a ^ b
        print(a, b)

    swap(5, 6)


    """
    Explaination:

    a = a ^ b
    b = a ^ b = (a ^ b) ^ b = a
    a = a ^ b = (a ^ b) ^ a = b
    """

7. Set Ith Bit

    def setIthBit(n, i):
        return (n | (1 << 2))

    n = 9 #1001
    i = 2
    print(setIthBit(n, i))

    """
    n = 9, i = 2

    1 0 0 1
    0 1 0 0 #take 1 and left shift by 2
    -----------
    1 1 0 1 ( perform OR )
    """

8. Clear Ith Bit

    def clearIth(n, i):
        """
        Wrong Approach Not work for 0
        """
        return (n ^ (1 << i))

    def clearIthBit(n, i):
        return (n & ~(1 << i))

    n = 9 #1001
    i = 2
    print(clearIthBit(n, i))

    """
    n = 13, i = 2

    1 1 0 1
    0 1 0 0 #take 1 and left shift by 2
    -----------
    1 0 0 1 ( perform XOR ) // wrong Approach


    Striver's Approach

    n = 13, i = 2

    1 1 0 1
    1 0 1 1 #take 1 and left shift by 2 perform ~ (NOT)
    ---------
    1 0 0 1 (perform AND)
    """


9. Toggle Ith Bit

    def toggleIthBit(n, i):
        return (n ^ (1 << i))

    n = 13 #1101
    i = 1
    print(toggleIthBit(n, i))

    """
    n = 13, i = 2

    1 1 0 1
    0 1 0 0 #take 1 and left shift by 2
    -----------
    1 0 0 1 ( perform XOR )


    n = 13, i = 1

    1 1 0 1
    0 0 1 0 #take 1 and left shift by 1
    -----------
    1 1 1 1 ( perform XOR )
    """


10. Remove Last Set Bit

    def removeLastSetBit(n):
        return (n & (n-1))

    n = 16 #1000
    print(removeLastSetBit(n))

    """
    n = 12

    1 1 0 0
    1 0 1 1 # n-1 (pattern the rightmost 1 is convetred into 0 and rest right bits are 1)
    -----------
    1 0 0 0 ( perform AND )


    n = 16

    1 0 0 0 0
    0 1 1 1 1 # n-1 (pattern the rightmost 1 is convetred into 0 and rest right bits are 1)
    -----------
    0 0 0 0 0 ( perform AND )
    """


11. Check if a number is power of 2

    def checkPowerOf2(n):
        return (n & (n-1) == 0)

    n = 16 #10000
    print(checkPowerOf2(n))

    """
    n = 16

    10000 (N)
    01111 (N-1)
    -----
    00000  (AND)
    """

12. Count the number of set bits

    def countSetBits(n):
        counter = 0

        while(n>1):
            rem = n % 2
            n = n // 2
            if rem == 1:
                counter += 1
        if n == 1:
            counter += 1
        return counter 

    def countSetBitsUsingBitWiseOperator(n):
        counter = 0

        while(n>1):
            #check odd, if odd is 1 remainder is 1
            counter += n&1
            n = n >> 1
        if n == 1:
            counter += 1
        return counter


    def countSetBitsUsingRemoveLastSetBit(n):
        counter = 0

        while (n>0):
            counter += 1
            n = n & n-1

        return counter


    n = 15 #01111
    print(countSetBitsUsingRemoveLastSetBit(n))


    """
    n = 16

    Iterate and check if rem is 1
    check if n is 1 at last


    Bit Wise Solution (use >> to divide)

    1000 >> 1 = 100 (4)
    100 >> 1 = 10 (2)
    10 >> 1 = 01 (1)


    Remove Last Set Bit (keep removing last set bit untill it becomes 0)

    N = 84

        1010100
    N-1 1010011
        --------
    &   1010000

        1010000
        1000000
        -------
    &   1000000


        1000000
        0111111
        --------
        0000000


    """